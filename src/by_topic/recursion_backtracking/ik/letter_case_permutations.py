# Letter Case Permutation
# Given a string, return all strings that can be generated by changing case of one or more letters in it.
#
# Example One
# {
#     "s": "a1z"
# }
# Output:
#
# ["A1Z", "A1z", "a1Z", "a1z"]
# Example Two
# {
#     "s": "123"
# }
# Output:
#
# ["123"]
# Notes
# Return strings in any order.
#
# Constraints:
#
# Input string may contain only: 'a'..'z', 'A'..'Z', '0'..'9'
# 1 <= length of the string <= 12


output = []
def letter_case_permutations(s):
    """
    Args:
     s(str)
    Returns:
     list_str
    """
    # Write your code here.
    helper(list(s), 0, [])
    return output


def helper(arr, index, slate):
    if index == len(arr):
        output.append("".join(slate))
        return

    char = arr[index]

    slate.append(char.lower())
    helper(arr, index + 1, slate)
    slate.pop()

    if not char.isdigit():
        slate.append(char.upper())
        helper(arr, index + 1, slate)
        slate.pop()
